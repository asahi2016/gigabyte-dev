<?php

function awards_reviews_init(){

    drupal_add_js(drupal_get_path('module', 'custom').'/awards_reviews/js/awards_reviews.js',array('scope' => 'footer'));
}

/**
 * Implementation of hook_menu().
 */
function awards_reviews_menu() {

    $items['awards_and_reviews/banner'] = array(
        'page callback' => 'get_awards_and_reviews_banner_image', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
    );

    return $items;
}

function get_awards_and_reviews_banner_image(){

    if($_POST['ajax'] == true){
        if(!empty($_POST['term_id'])){
            $term = taxonomy_term_load($_POST['term_id']);
            $uri = isset($term->field_awards_banner_image['und'][0]['uri'])? file_create_url($term->field_awards_banner_image['und'][0]['uri']):'';

            if($uri){
                $uri = '<div class="awards-reviews-banner">
                        <img src='.$uri.' height="500" width="1000"/>
                        </div>';
            }
            $result = array('banner' => $uri);
            echo json_encode($result);
        }
    }
}

// Alter the webform elements
function awards_reviews_form_awards_reviews_node_form_alter(&$form, &$form_state, $form_id){

    $form['options']['promote']['#value'] = 0;
    unset($form['ajax-submit']['#ajax']);
    $form['additional_settings']['#access'] = FALSE;
    $form['actions']['delete']['#access'] = FALSE;
    $form['options']['status']['#value'] = 1;
    $form['ajax-submit']['#value'] ='Submit';
    $form['ajax-submit']['#submit'][] ='create_awards_and_reviews_content';
    $form['#validate'][] = 'awards_reviews_form_validation';
    //$form['#submit'][] = 'create_awards_and_reviews_content';;
}

function create_awards_and_reviews_content(&$form, &$form_state) {

    $form_state['values']['promote'] = 0;
    $current_url = url(current_path(), array('absolute' => TRUE));
    $form_state['redirect'] = $current_url;
}

function awards_reviews_form_validation(&$form, &$form_state){
    // Append custom error message element with content
    awards_reviews_errors_reset($form);
}

function awards_reviews_errors_reset(&$element){

    // Check for errors and settings
    $errors = form_get_errors();

    if( ! isset( $_SESSION[ 'messages' ] ) ) {
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += awards_reviews_errors_reset( $element[ $key ] );
        }
    }

    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            switch($element['#type']){

                case 'textfield':
                      $error_message = str_replace('field is required', 'cannot be empty' ,$error_message);
                      break;
                case 'file':
                      $error_message = isset($errors['field_award_image_und_0'])?
                            'Invalid file format, Only files with the following extensions are allowed: png gif jpg jpeg':
                            $error_message;
                      unset($errors['field_award_image_und_0']);
                      break;
            }

            $element[ '#suffix' ] = '<span class="custom-error '.$element[ '#id' ].'" >'.$error_message.'</span>';

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }

    return $reset_errors;

}

function awards_reviews_views_pre_render(&$view){

    return $view;

}



