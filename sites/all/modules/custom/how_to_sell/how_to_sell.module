<?php

function how_to_sell_init()
{
    if (arg(0) == 'partner' && arg(1) == 'how-to-sell-amd'||'how-to-sell-intel'  && arg(2) == null) {
        drupal_add_js(drupal_get_path('module', 'custom') . '/how_to_sell/js/how_to_sell.js');
    }
}
// Alter the webform elements
function how_to_sell_form_how_to_sell_node_form_alter(&$form, &$form_state, $form_id){

    if($form_id == 'how_to_sell_node_form'){
        $form['title']['#title'] ='Model Name';
        $form['options']['promote']['#value'] = 0;
        $form['#validate'][] = 'how_to_sell_form_validation';
        $form['ajax-submit']['#submit'][] = 'how_to_sell_form_submit';
        $form['ajax-submit']['#value'] = t('Submit');
        unset($form['ajax-submit']['#ajax']);
    }

   return $form;
}

function how_to_sell_form_validation(&$form, &$form_state){
    // Append custom error message element with content
    how_to_sell_errors_reset($form);

}

function how_to_sell_form_submit(&$form,&$form_state){

    $current_url = url(current_path(), array('absolute' => TRUE));
    $form_state['redirect'] = $current_url;
}

function how_to_sell_errors_reset(&$element){

    // Check for errors and settings
    $errors = form_get_errors();

    if( ! isset( $_SESSION[ 'messages' ] ) ) {
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += how_to_sell_errors_reset( $element[ $key ] );
        }
    }

    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            switch($element['#type']){

                case 'textfield':
                    $error_message = str_replace('Model Name field is required.','Model Name Cannot be empty.',$error_message);
                    break;
                case 'file':
                    $error_message = str_replace('File Image field is required.','File Image Cannot be empty.',$error_message);
                    $error_message = str_replace('File PDF field is required.','File PDF Cannot be empty.',$error_message);

            }

            $element[ '#suffix' ] = '<span class="custom-error '.$element[ '#id' ].'" >'.$error_message.'</span>';

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }
    return $reset_errors;
}

function how_to_sell_views_pre_render(&$view){

    if(user_is_logged_in()){

        if($view->name == 'how_to_sell_view' || $view->name == 'how_to_sell_amd'){
            foreach($view->result as $key => $value){
                if(isset($view->result[$key]->field_field_file_pdf[0])){
                    $uri = $view->result[$key]->field_field_file_pdf[0]['rendered']['#file']->uri;
                    $uri = str_replace('public://','',$uri);
                    $uri_title_pdf = '../sites/default/files/'.$uri;
                    $uri_image_pdf = 'sites/default/files/'.$uri;
                    $view->result[$key]->field_field_file_image[0]['rendered']['#path']['path'] = $uri_image_pdf;
                    $view->result[$key]->field_field_file_pdf_1[0]['rendered']['#markup'] = $uri_title_pdf;
                }
            }
        }
    }
    return $view;
}



