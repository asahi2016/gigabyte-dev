<?php

function intel_technology_provider_init(){
    $css = ".page-intel-technology div.messages.error {display : none}";
    drupal_add_css($css, 'inline');
    drupal_add_js(drupal_get_path('module', 'custom').'/intel_technology_provider/js/intel_technology_provider.js',array('scope' => 'footer'));
}


function intel_technology_provider_menu(){

    $items['intel/technology/provider'] = array(
        'page callback' => 'display_intel_technology_provider_models', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
    );

    return $items;

}


function display_intel_technology_provider_models(){

    return theme('intel_technology_provider_models', array('data' => ''));
}


/**
 * Implements hook_block_info().
 */
function intel_technology_provider_block_info() {

    $blocks['intel_motherboard_models'] = array(
        'info' => t('QUALIFYING MOTHERBOARD MODELS'),
    );

    $blocks['intel_brix_models'] = array(
        'info' => t('QUALIFYING BRIX MODELS'),
    );

    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function intel_technology_provider_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'intel_motherboard_models':
            $block['content'] = theme('intel_motherboard_models', array('motherboard' => ''));
            break;

        case 'intel_brix_models':

            $block['content'] = theme('intel_brix_models', array('brix' => ''));
            break;
    }

    return $block;
}

/**
 * Implements hook_theme().
 */
function intel_technology_provider_theme(){

    $path = drupal_get_path('module', 'intel_technology_provider') . '/templates';

    return array(
                'intel_technology_provider_models' => array(
                    'path' => $path,
                    'template' => 'intel-technology-provider-models',
                    'variables' => array('data' => NULL),
                ),
                'intel_motherboard_models' => array(
                    'path' => $path,
                    'template' => 'intel-motherboard-models',
                    'variables' => array('motherboard' => NULL),
                ),
                'intel_motherboard_models_normal' => array(
                    'path' => $path,
                    'template' => 'intel-motherboard-models-normal',
                    'variables' => array('motherboard_normal' => NULL),
                ),
                'intel_brix_models' => array(
                    'path' => $path,
                    'template' => 'intel-brix-models',
                    'variables' => array('brix' => NULL),
                ),
                'gigabyte_authorized_distributors' => array(
                    'path' => $path,
                    'template' => 'gigabyte-authorized-distributors',
                    'variables' => array('distributors' => NULL),
                )
              );
}


function template_preprocess_intel_technology_provider_models(&$variables){

    $motherboard_models_term_name = 'QUALIFYING MOTHERBOARD MODELS';

    $motherboard_models = get_vocabulary_terms_info_by_taxonomy_name($motherboard_models_term_name, 'motherboard');

    $motherboard_models_output = theme('intel_motherboard_models', array('motherboard' => $motherboard_models));
    $motherboard_models_normal_output = theme('intel_motherboard_models_normal', array('motherboard_normal' => $motherboard_models));

    $variables['intel_motherboard_models'] = $motherboard_models_output;
    $variables['intel_motherboard_models_normal'] = $motherboard_models_normal_output;

    $brix_models_term_name = 'QUALIFYING BRIX MODELS';

    $brix_models = get_vocabulary_terms_info_by_taxonomy_name($brix_models_term_name, 'brix');

    $brix_models_output = theme('intel_brix_models', array('brix' => $brix_models));

    $variables['intel_brix_models'] = $brix_models_output;

    $gigabyte_authorized_distributors = 'GIGABYTE AUTHORIZED DISTRIBUTORS';
    $gigabyte_distributors = get_gigabyte_authorized_distributors($gigabyte_authorized_distributors, 'gigabyte_authorized_distributors');
    $gigabyte_distributors_output = theme('gigabyte_authorized_distributors', array('distributors' => $gigabyte_distributors));
    $variables['gigabyte_authorized_distributors'] = $gigabyte_distributors_output;

    $video_content = (module_invoke('views', 'block_view', 'itp_gigabyte_product_training-block'))? module_invoke('views', 'block_view', 'itp_gigabyte_product_training-block') :'';

    $variables['itp_gigabyte_product_training'] = $video_content;

    return $variables;

}

function get_gigabyte_authorized_distributors($name  = NULL, $model = NULL){

    $query = db_select('taxonomy_vocabulary', 'tv');
    $query->fields('tv', array(
        'machine_name',
        'vid',
    ));
    $query->condition('tv.name', $name, '=');
    $vocabulary_obj = $query->execute()->fetchObject();

    $terms = taxonomy_get_tree($vocabulary_obj->vid);

    foreach ($terms as $key => $term){
        $terms[$key]->term = taxonomy_term_load($term->tid);
    }

    return $terms;

}


function get_vocabulary_terms_info_by_taxonomy_name($name  = NULL, $model = NULL){

    if(!empty($name)){

        $query = db_select('taxonomy_vocabulary', 'tv');
        $query->fields('tv', array(
            'machine_name',
            'vid',
        ));
        $query->condition('tv.name', $name, '=');
        $vocabulary_obj = $query->execute()->fetchObject();

        $terms = taxonomy_get_tree($vocabulary_obj->vid);

        foreach ($terms as $key => $term){
            $terms[$key]->term = taxonomy_term_load($term->tid);

            if($model == 'motherboard') {
                $terms[$key]->term->points = taxonomy_term_load($terms[$key]->term->field_motherboard_points['und'][0]['tid'])->name;
            }elseif ($model == 'brix'){
                $terms[$key]->term->points = taxonomy_term_load($terms[$key]->term->field_brix_points['und'][0]['tid'])->name;
            }

        }

        $filtered_terms = get_points_related_taxonomy_grouped_terms($terms);

        return $filtered_terms;

    }

    return false;

}


function get_points_related_taxonomy_grouped_terms($terms = array()){

    if($terms){

        $points_terms = array();
        $terms_points = array();

        foreach ($terms as $key => $term){

            if($term->depth > 0){

                $parent_id = null;
                foreach ($term->parents as $k => $parents){
                    $parent_id = $parents;
                }
                $parent_id_points = $terms_points[$parent_id]['points'];
                $parent_id_key = $terms_points[$parent_id]['key'];
                $points_terms[$parent_id_points][$parent_id_key]->subterm[] = $term;


            }else{

                $points = (int)$term->term->points;
                $points_terms[$points][] = $term;
                $last_key = null;
                foreach ($points_terms[$points] as $lkey => $val){
                    $last_key = $lkey;
                }

                $terms_points[$term->tid] = array('points' => $points, 'key' => $last_key);

            }
        }

    }

    return $points_terms;

}

function template_preprocess_intel_motherboard_models(&$variables){

    return $variables;

}


function template_preprocess_intel_motherboard_models_normal(&$variables){

    $motherboard_normal = array();
    foreach($variables['motherboard_normal'] as $points => $terms){
        foreach ($terms as $term){
            $motherboard_normal[] = $term;
        }
    }

    $variables['normal_motherboard'] = $motherboard_normal;

    return $variables;

}


function template_preprocess_intel_brix_models(&$variables){

    //print_pre($variables['brix']);

    return $variables;

}

function template_preprocess_gigabyte_authorized_distributors(&$variables){

    $gigabyte_authorized_distributors = array();

    foreach ($variables['distributors'] as $key => $terms){
        $country_tid = $terms->term->field_distributor_country['und'][0]['tid'];
        $gigabyte_authorized_distributors[$country_tid][] = $terms;
    }

    unset($variables['distributors']);
    $variables['distributors'] = $gigabyte_authorized_distributors;

    return $variables;
}

