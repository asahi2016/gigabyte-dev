<?php

function group_registration_init(){

    drupal_add_js(drupal_get_path('module', 'custom').'/group_registration/js/registration.js');
}


/**
 * Implement hook_form_user_register_form_alter().
 */
function group_registration_form_user_register_form_alter(&$form, &$form_state, $form_id) {

    unset($form['field_other_programs']['und'][0]['value']['#title']);
    unset($form['field_other_distributor']['und'][0]['value']['#title']);
    unset($form['field_other_sub_distributor']['und'][0]['value']['#title']);
    unset($form['field_other_programs']['und']['#title']);
    unset($form['field_other_distributor']['und']['#title']);
    unset($form['field_other_sub_distributor']['und']['#title']);
    unset($form['account']['name']['#description']);
    unset($form['account']['mail']['#description']);
    form_clear_error();
    $form['#validate'][] = 'group_registration_form_validation';
    drupal_set_title('');
    $form['actions']['submit']['#value'] = t('Submit Query');
    $form['#submit'][] = 'create_company_group_on_user_registration';
}

/*
* User registration form custom module validation function
*/
function group_registration_form_validation ( &$form, &$form_state) {

    $email = $form_state['input']['mail'];
    if(!$email){
        form_set_error('mail' , 'Email Address cannot be empty.');
    }

    $pass = $form_state['values']['pass'];
    $pass_count = ($pass)? strlen($pass):0;
    if(!$pass){
       form_set_error('pass' , 'Password cannot be empty.');
    }else if($pass && ($pass_count >= 6 && $pass_count <= 20)){
        if(!preg_match('/^([a-zA-Z0-9_@.]+)$/',$pass)){
            form_set_error('pass',t('Password should be alphabets, numbers and allowed special characters ( _ . @)'));
        }
    }else{
        form_set_error('pass',t('Password should be minimum 8 characters and maximum 20 characters'));
    }

    $field_participating_programs = $form_state['values']['field_participating_programs']['und'];
    if(!$field_participating_programs){
        form_set_error('field_participating_programs' , 'Please choose any one option');
    }else{
        $other_program = false;

        foreach($field_participating_programs as $programs_input){
            foreach($form_state['complete form']['field_participating_programs']['und']['#options'] as $pkey => $programs){
                if($pkey == $programs_input['tid'] && strtolower($programs) == 'other'){
                    $other_program = true;
                }
            }
        }

        if($other_program){
            empty($form_state['values']['field_other_programs']['und'][0]['value'])?
                form_set_error('field_other_programs' , 'Other cannot be empty') : '';
        }

    }

    $field_choose_distributor = $form_state['values']['field_choose_distributor']['und'];
    if(!$field_choose_distributor){
        form_set_error('field_choose_distributor' , 'Please choose any one option');
    }else{
        $other_distributor = false;
        foreach($field_choose_distributor as $distributor_input){
            foreach($form_state['complete form']['field_choose_distributor']['und']['#options'] as $dkey => $distributor){
                if($dkey == $distributor_input['tid'] && strtolower($distributor) == 'other'){
                    $other_distributor = true;
                }
            }
        }
        if($other_distributor){
            empty($form_state['values']['field_other_distributor']['und'][0]['value'])?
                form_set_error('field_other_distributor' , 'Other cannot be empty') : '';
        }

    }

    $field_choose_sub_distributor = $form_state['values']['field_choose_sub_distributor']['und'];
    if(!$field_choose_sub_distributor){
        form_set_error('field_choose_sub_distributor' , 'Please choose any one option');
    }else{
        $other_sub_distributor = false;
        foreach($field_choose_sub_distributor as $subdistributor_input){
            foreach($form_state['complete form']['field_choose_sub_distributor']['und']['#options'] as $sdkey => $sdistributor){
                if($sdkey == $subdistributor_input['tid'] && strtolower($sdistributor) == 'other'){
                    $other_sub_distributor = true;
                }
            }
        }
        if($other_sub_distributor){
            empty($form_state['values']['field_other_sub_distributor']['und'][0]['value'])?
                form_set_error('field_other_sub_distributor' , 'Other cannot be empty') : '';
        }

    }

    // Append custom error message element with content
    group_registration_errors_reset( $form );

}

function group_registration_errors_reset(&$element){

    if( ! isset( $_SESSION[ 'messages' ] ) ) {
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += group_registration_errors_reset( $element[ $key ] );
        }
    }

    // Check for errors and settings
    $errors = form_get_errors();
    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            switch($element['#type']){

                case 'textfield':
                      $error_message = str_replace('field is required','cannot be empty',$error_message);
                      break;
                case 'password_confirm':
                    $error_message = str_replace('field is required','cannot be empty',$error_message);
                    break;
                case 'checkboxes':
                      $error_message = str_replace($error_message ,'Please select atleast one checkboxes',$error_message);
                    break;
                case 'radio':
                      $error_message = str_replace($error_message ,'Please select any one option',$error_message);
                    break;
                case 'select':
                      $error_message = str_replace($error_message ,'Please select any one member type',$error_message);
                    break;

            }

            $element[ '#suffix' ] = '<span class="custom-error">'.$error_message.'</span>';

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }

    return $reset_errors;

}


/**
 * Custom submit function for user registration form
 */
function create_company_group_on_user_registration($form, &$form_state) {

    $usr_obj = $form_state['user']; //get registered user object

    if (is_object($usr_obj) && isset($usr_obj->uid) && !check_group_title($form_state['input']['field_company_name']['und'][0]['target_id'])) {// dont forget to add your conditions

        global $user;

        $node = new stdClass();

        $node->type     = "group";
        $node->uid      = $user->uid;
        $node->title    = t($form_state['input']['field_company_name']['und'][0]['target_id']);
        $node->body     = t($form_state['input']['field_company_name']['und'][0]['target_id'] . "Group");
        $node->status       = 1; //(1 or 0): published or not
        $node->promote      = 0; //(1 or 0): promoted to front page
        $node->comment      = 1; //2 = comments on, 1 = comments off

        $node->og_description   = t("OD Description");
        $node->og_register  = 0;
        $node->og_directory = 0;
        $node->og_private   = 1;
        $node->og_selective = 3;

        $node = node_submit($node);
        node_save($node);

        // Load the user we want to add to the group (ID #2 was my test user)
        $account = user_load($user->uid);

        // Add the user to the group
        og_group('node', $node->nid, array(
            "entity type"       => "user",
            "entity"        => $account,
            "membership type"   => OG_MEMBERSHIP_TYPE_DEFAULT,
        ));

        // Changes the users role in the group (1 = non-member, 2 = member, 3 = administrator member)
        og_role_grant('node', $node->nid, $account->uid, 2);

        drupal_set_message(t("Finished"));

    }
}


function check_group_title($group_title = null){

    if(!empty($group_title)) {

        $result = db_select('node', 'n')
        ->fields('n')
        ->condition('type', 'group' , '=')
        ->condition('title', $group_title, '=')
        ->condition('status', 1,'=')
        ->execute()
        ->fetchAssoc();

        return ($result) ? true : false;
    }

    return false;

}


/**
 * Implements hook_node_update().
 */
function group_registration_node_update($node) {

    $gid = isset($node->field_project['und'][0]['target_id']) ? $node->field_project['und'][0]['target_id']: 0;

    // Node type with group reference field.
    if ($node->type != "group_content" || !$gid) {
        return false;
    }

    $values = array(
        'entity_type' => 'node',
        'entity' => $node,
        'state' => OG_STATE_ACTIVE,
    );

    // Add this node to the group.
    $result = og_group('node', $gid, $values);
}
?>
