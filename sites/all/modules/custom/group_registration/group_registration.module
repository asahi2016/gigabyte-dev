<?php

function group_registration_init(){

    global $base_path;
    global $base_url;
    $my_settings = array(
        'basePath' => $base_path,
        'baseUrl' => $base_url,
    );

    drupal_add_js(array('gigabyte' => $my_settings), 'setting');
    drupal_add_js(drupal_get_path('module', 'custom').'/group_registration/js/registration.js');
}


/**
 * Implementation of hook_menu().
 */
function group_registration_menu() {

    $items['get/company_info'] = array(
        'page callback' => 'group_registration_ajax_get_company_info', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
    );
    return $items;
}

function group_registration_ajax_get_company_info() {

    global $user;

    if(isset($_POST['ajax']) && $_POST['ajax'] == true){

        $response = array();
        $company_name = $_POST['company_name'];

        $group_users = get_group_users_lists(array('group_name' => $company_name));

        $group_info = array();

        foreach($group_users as $key => $group_user) {

            if(isset($group_user->og_user_node['und'][0]['target_id'])) { // Check Group Admin user

                $business_address_1 = $group_user->field_business_address_1['und'][0]['value'];
                $business_address_2 = $group_user->field_business_address_2['und'][0]['value'];
                $company_zip_code = $group_user->field_company_zip_code['und'][0]['value'];
                $company_state = $group_user->field_company_state['und'][0]['value'];
                $company_city = $group_user->field_company_city['und'][0]['value'];
                $company_country = $group_user->field_country['und'][0]['tid'];

                $group_info = array(
                    'business_address_1' => $business_address_1,
                    'business_address_2' => $business_address_2,
                    'zip' => $company_zip_code,
                    'state' => $company_state,
                    'city' => $company_city,
                    'country' => $company_country,
                );
            }

        }

        $response['response'] = array('group_name' => $company_name , 'roles' => $group_users[0]->roles , 'group_info' => $group_info);

        echo json_encode($response);
    }
}

function get_group_users_lists($group = array()){

    $group_users = array();

    preg_match("/.+\((\d+)\)/", $group['group_name'] , $matches);
    $group_id = trim($matches[1]);

    //Get group id by group name
    $result = db_query("SELECT * FROM {node} n WHERE n.nid = :nid AND n.type = :type", array(":nid"=> $group_id , ":type"=> 'group'));
    $group = $result->fetchAssoc();

    //Filter user group lists
    $userinfo = db_query("SELECT * FROM {users} u ORDER BY created ASC")->fetchAll();

    foreach($userinfo as $key => $user){
        $user_details = user_load_multiple(array($user->uid));
        foreach($user_details as $ukey => $user_detail ){
            if(!in_array('administrator', $user_detail->roles)){
                if($user_detail->field_company_name['und'][0]['target_id'] == $group['nid']){
                    array_push($group_users, $user_detail);
                }
            }
        }

    }

    return $group_users;

}

/**
 * Implement hook_form_user_register_form_alter().
 */
function group_registration_form_user_register_form_alter(&$form, &$form_state, $form_id) {

    unset($form['field_other_programs']['und'][0]['value']['#title']);
    unset($form['field_other_distributor']['und'][0]['value']['#title']);
    unset($form['field_other_sub_distributor']['und'][0]['value']['#title']);
    unset($form['field_other_programs']['und']['#title']);
    unset($form['field_other_distributor']['und']['#title']);
    unset($form['field_other_sub_distributor']['und']['#title']);
    unset($form['account']['name']['#description']);
    unset($form['account']['mail']['#description']);
    form_clear_error();
    $form['field_company_name']['#prefix'] = '<!--<div id="field-blocker" ></div>-->';
    $form['#validate'][] = 'group_registration_form_validation';
    drupal_set_title('');
    $form['actions']['submit']['#value'] = t('Submit Query');
    $form['#submit'][] = 'create_company_group_on_user_registration';
}

/*
* User registration form custom module validation function
*/
function group_registration_form_validation (&$form, &$form_state ) {

    $email = $form_state['input']['mail'];
    if(!$email){
        form_set_error('mail' , 'Email Address cannot be empty.');
    }

    $pass = $form_state['values']['pass'];
    $pass_count = ($pass)? strlen($pass):0;
    if(!$pass){
       form_set_error('pass' , 'Password cannot be empty.');
    }else if($pass && ($pass_count >= 6 && $pass_count <= 20)){
        if(!preg_match('/^([a-zA-Z0-9_@.]+)$/', $pass)){
            form_set_error('pass',t('Password should be alphabets, numbers and allowed special characters ( _ . @)'));
        }
    }else{
        form_set_error('pass',t('Password should be minimum 8 characters and maximum 20 characters'));
    }

    $field_participating_programs = $form_state['values']['field_participating_programs']['und'];
    if(!$field_participating_programs){
        form_set_error('field_participating_programs' , 'Please choose any one option');
    }else{
        $other_program = false;

        foreach($field_participating_programs as $programs_input){
            foreach($form_state['complete form']['field_participating_programs']['und']['#options'] as $pkey => $programs){
                if($pkey == $programs_input['tid'] && strtolower($programs) == 'other'){
                    $other_program = true;
                }
            }
        }

        if($other_program){
            empty($form_state['values']['field_other_programs']['und'][0]['value'])?
                form_set_error('field_other_programs' , 'Other cannot be empty') : '';
        }

    }

    $field_choose_distributor = $form_state['values']['field_choose_distributor']['und'];
    if(!$field_choose_distributor){
        form_set_error('field_choose_distributor' , 'Please choose any one option');
    }else{
        $other_distributor = false;
        foreach($field_choose_distributor as $distributor_input){
            foreach($form_state['complete form']['field_choose_distributor']['und']['#options'] as $dkey => $distributor){
                if($dkey == $distributor_input['tid'] && strtolower($distributor) == 'other'){
                    $other_distributor = true;
                }
            }
        }
        if($other_distributor){
            empty($form_state['values']['field_other_distributor']['und'][0]['value'])?
                form_set_error('field_other_distributor' , 'Other cannot be empty') : '';
        }

    }

    $field_choose_sub_distributor = $form_state['values']['field_choose_sub_distributor']['und'];
    if(!$field_choose_sub_distributor){
        form_set_error('field_choose_sub_distributor' , 'Please choose any one option');
    }else{
        $other_sub_distributor = false;
        foreach($field_choose_sub_distributor as $subdistributor_input){
            foreach($form_state['complete form']['field_choose_sub_distributor']['und']['#options'] as $sdkey => $sdistributor){
                if($sdkey == $subdistributor_input['tid'] && strtolower($sdistributor) == 'other'){
                    $other_sub_distributor = true;
                }
            }
        }
        if($other_sub_distributor){
            empty($form_state['values']['field_other_sub_distributor']['und'][0]['value'])?
                form_set_error('field_other_sub_distributor' , 'Other cannot be empty') : '';
        }

    }

    // Append custom error message element with content
    group_registration_errors_reset( $form );

}

function group_registration_errors_reset(&$element){


    if( ! isset( $_SESSION[ 'messages' ] ) ) {

        $group_id = null;
        if (preg_match("/.+\((\d+)\)/", $element['field_company_name']['und'][0]['target_id']['#value'] , $matches)) {
            $group_id =  $matches[1];
        }

        if (!$group_id && !check_group_title($element['field_company_name']['und'][0]['target_id']['#value'])) {
            $_SESSION['new_group_name'] = $element['field_company_name']['und'][0]['target_id']['#value'];
            if(!isset($_SESSION['new_group_name'])){
                $_SESSION['new_group_name'] = $element['field_company_name']['und'][0]['target_id']['#value'];
            }
        }
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += group_registration_errors_reset( $element[ $key ] );
        }
    }

    // Check for errors and settings
    $errors = form_get_errors();
    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            switch($element['#type']){

                case 'textfield':
                      $error_message = str_replace('3. ','',$error_message);
                      $error_message = str_replace('field is required','cannot be empty',$error_message);
                      break;
                case 'password_confirm':
                    $error_message = str_replace('field is required','cannot be empty',$error_message);
                    break;
                case 'checkboxes':
                      $error_message = str_replace($error_message ,'Please select at least one checkboxes',$error_message);
                    break;
                case 'radio':
                      $error_message = str_replace($error_message ,'Please select any one option',$error_message);
                    break;
                case 'select':
                      $error_message = str_replace($error_message ,'Please select any one member type',$error_message);
                    break;

            }

            $element[ '#suffix' ] = '<span class="custom-error">'.$error_message.'</span>';

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }

    return $reset_errors;

}


/**
 * Custom submit function for user registration form
 */
function create_company_group_on_user_registration( &$form, &$form_state ) { }

function check_group_title($group_title = null){

    if(!empty($group_title)) {

        $result = db_select('node', 'n')
        ->fields('n')
        ->condition('type', 'group' , '=')
        ->condition('title', $group_title, '=')
        ->condition('status', 1,'=')
        ->execute()
        ->fetchAssoc();

        return ($result) ? true : false;
    }

    return false;

}

function check_group_id($group_id = null){

    if(!empty($group_id)) {

        $result = db_select('node', 'n')
            ->fields('n')
            ->condition('type', 'group' , '=')
            ->condition('nid', $group_id, '=')
            ->condition('status', 1,'=')
            ->execute()
            ->fetchAssoc();

        return ($result) ? true : false;
    }

    return false;

}

/*
 * Group Create
 */
function group_registration_user_presave(&$edit, $account, $category) {

    if(isset($_SESSION['new_group_name']) && !empty($_SESSION['new_group_name'])){

        $group_name = $_SESSION['new_group_name'];

        if (!check_group_title($group_name)) {// dont forget to add your conditions

            $node = new stdClass();
            $node->type     = "group";
            $node->uid      = $account->uid;
            $node->title    = t($group_name);
            $node->body     = t($group_name . " Group");
            $node->status       = 1; //(1 or 0): published or not
            $node->promote      = 0; //(1 or 0): promoted to front page
            $node->comment      = 1; //2 = comments on, 1 = comments off

            $node->og_description   = t("$group_name handle by $account->name");
            $node->og_register  = 0;
            $node->og_directory = 0;
            $node->og_private   = 1;
            $node->og_selective = 3;

            $node = node_submit($node);
            node_save($node);

            $group_id = $node->nid;

            $edit['field_company_name']['und'][0]['target_id'] = $group_id;

        }
    }

}


/*
 * Assign a user to Group
 */
function group_registration_user_insert(&$edit, $account, $category){

    $nid = $account->field_company_name['und'][0]['target_id'];
    if($nid && isset($_SESSION['new_group_name'])  && !empty($_SESSION['new_group_name'])){
        $node = node_load($nid);
        if (isset($node)) {
            $node->uid = $account->uid;
            $node->og_description   = t($_SESSION['new_group_name'] ." handle by $account->name");
            node_save($node);
            unset($_SESSION['new_group_name']);
        }
    }
}

?>
