<?php

function group_registration_init(){

    global $base_path;
    global $base_url;
    $my_settings = array(
        'basePath' => $base_path,
        'baseUrl' => $base_url,
    );

    drupal_add_js(array('gigabyte' => $my_settings), 'setting');
    drupal_add_js(drupal_get_path('module', 'custom').'/group_registration/js/registration.js');
}


/**
 * Implementation of hook_menu().
 */
function group_registration_menu() {

    $items['get/company_info'] = array(
        'title' => 'Get Company Information',
        'page callback' => 'group_registration_ajax_get_company_info', // Render HTML
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
        'access callback' => TRUE,
    );

    $items['account/settings/update'] = array(
        'title' => 'Update Account Setting Page',
        'page callback' => 'group_registration_account_settings_update', // Render HTML
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
        'access callback' => TRUE,
    );

    $items['user/account'] = array(
        'title' => 'Account setting page',
        'page callback' => 'group_registration_user_account_redirect', // Render HTML
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
        'access callback' => TRUE,
    );

    return $items;
}

function group_registration_user_account_redirect(){

   global $user;
   drupal_goto('user/'.$user->uid.'/edit');
}

function group_registration_account_settings_update(){

    if(isset($_POST) && !empty($_POST)) {

        global $user;

        $account = user_load($user->uid);

        require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

        $check_pass = true;
        if(empty($_POST['current_pass']) && empty($_POST['pass']['pass1']) && empty($_POST['pass']['pass2'])){
            unset($_POST['current_pass']);
            unset($_POST['pass']);
            $check_pass = false;
        }

        if($check_pass === true) {

            if (isset($_POST['current_pass']) && !empty($_POST['current_pass'])) {

                $check_current_pass = user_check_password(trim($_POST['current_pass']) , $account);

                if (!$check_current_pass) {
                   form_set_error('current_pass', 'Current password you entered did not correct.');
                }
            }

            if (isset($_POST['pass']) && !empty($_POST['pass']) && is_array($_POST['pass'])) {

                if (empty($_POST['pass']['pass1'])) {
                    form_set_error('current_pass', 'Password cannot be empty.');

                }

                if (empty($_POST['pass']['pass2'])) {
                    form_set_error('current_pass', 'Confirm Password cannot be empty.');

                }

                if ($_POST['pass']['pass1'] != $_POST['pass']['pass2']) {
                    form_set_error('current_pass', 'Password you entered does not match.');
                }

                $pass_count = ($_POST['pass']['pass1'])? strlen($_POST['pass']['pass1']):0;

                if($_POST['pass']['pass1'] && ($pass_count >= 8 || $pass_count <= 20)){
                    if(!preg_match('/^(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z$&+,:;=?@#|<>.-^*()%!]{8,20}$/', $_POST['pass']['pass1'])){
                        form_set_error('current_pass',t('Password does not meet the requirement'));
                    }
                }else if($_POST['pass']['pass1'] && ($pass_count < 8 || $pass_count > 20)){
                    form_set_error('current_pass',t('Password does not meet the requirement'));
                }
            }
        }

        if(isset($_POST['field_contact_number'])){
            if(empty($_POST['field_contact_number']['und'][0]['value']))
                form_set_error('field_contact_number', 'Contact Number cannot be empty.');
        }

        $errors = form_get_errors();

        if($errors){
            $_SESSION['account_setting_error'] = $errors;
        }

        if(!$errors) {

            $category = 'account';

            $distributor = $_POST['field_choose_distributor']['und'];

            $i = 0;
            foreach ($_POST['field_choose_distributor']['und'] as $key => $dist) {
                unset($_POST['field_choose_distributor']['und'][$key]);
                $_POST['field_choose_distributor']['und'][$i]['tid'] = $dist;
                $i++;
            }

            $i = 0;
            foreach ($_POST['field_choose_sub_distributor']['und'] as $key => $dist) {
                unset($_POST['field_choose_sub_distributor']['und'][$key]);
                $_POST['field_choose_sub_distributor']['und'][$i]['tid'] = $dist;
                $i++;
            }
            $i = 0;
            foreach ($_POST['field_participating_programs']['und'] as $key => $dist) {
                unset($_POST['field_participating_programs']['und'][$key]);
                $_POST['field_participating_programs']['und'][$i]['tid'] = $dist;
                $i++;
            }

            $rma_country = $_POST['field_rma_country']['und'];
            unset($_POST['field_rma_country']['und']);
            $_POST['field_rma_country']['und'][0]['tid'] = $rma_country;

            $news = $_POST['field_receive_newsletter']['und'];
            unset($_POST['field_receive_newsletter']['und']);
            $_POST['field_receive_newsletter']['und'][0]['value'] = $news;

            if(isset($_POST['pass'])) {
                //Replace new password
                $new_password = $_POST['pass']['pass1'];
                unset($_POST['pass']);
                $_POST['pass'] = trim($new_password);
            }

            user_save($account, $_POST, $category);

            // Clear the page cache because pages can contain usernames and/or profile information:
            cache_clear_all();

            drupal_set_message(t('The changes have been updated.'));

        }

        drupal_goto('user/' . $user->uid . '/edit');
    }

}

function group_registration_ajax_get_company_info() {

    global $user;

    if(isset($_POST['ajax']) && $_POST['ajax'] == true){

        $response = array();
        $company_name = $_POST['company_name'];

        //$group_users = get_group_users_lists(array('group_name' => $company_name));
        $group_users = get_group_admin_user(array('group_name' => $company_name));

        $group_info = array();

        foreach($group_users as $key => $group_user) {

            if(isset($group_user->og_user_node['und'][0]['target_id']) && !empty($group_user->og_user_node['und'][0]['target_id'])) { // Check Group Admin user

                $business_address_1 = $group_user->field_business_address_1['und'][0]['value'];
                $business_address_2 = $group_user->field_business_address_2['und'][0]['value'];
                $company_zip_code = $group_user->field_company_zip_code['und'][0]['value'];
                $company_state = $group_user->field_company_state['und'][0]['value'];
                $company_city = $group_user->field_company_city['und'][0]['value'];
                $company_country = $group_user->field_country['und'][0]['tid'];

                $participating_programs = array();
                foreach ($group_user->field_participating_programs['und'] as $k => $tid){
                    $participating_programs[$k]= $tid['tid'];
                }

                $distributor = array();
                foreach ($group_user->field_choose_distributor['und'] as $k => $tid){
                    $distributor[$k] = $tid['tid'];
                }

                $sub_distributor = array();
                foreach ($group_user->field_choose_sub_distributor['und'] as $k => $tid){
                    $sub_distributor[$k] = $tid['tid'];
                }

                $other_programs = $group_user->field_other_programs['und'][0]['value'];
                $other_distributor = $group_user->field_other_distributor['und'][0]['value'];
                $other_sub_distributor = $group_user->field_other_sub_distributor['und'][0]['value'];

                $motherboard_qty = $group_user->field_motherboard_qty['und'][0]['value'];
                $membership = $group_user->field_membership_account['und'][0]['value'];
                $newsletter = $group_user->field_receive_newsletter['und'][0]['value'];

                $group_info = array(
                    'business_address_1' => $business_address_1,
                    'business_address_2' => $business_address_2,
                    'zip' => $company_zip_code,
                    'state' => $company_state,
                    'city' => $company_city,
                    'country' => $company_country,
                    'programs' => array('ids' => $participating_programs,'others' => $other_programs),
                    'distributor' => array('ids' => $distributor,'others' => $other_distributor),
                    'sub_distributor' => array('ids' => $sub_distributor,'others' => $other_sub_distributor),
                    'membership' => $membership,
                    'motherboard_qty' => $motherboard_qty,
                    'newsletter' => $newsletter
                );
            }

        }

        $response['response'] = array('group_name' => $company_name , 'roles' => $group_users[0]->roles , 'group_info' => $group_info);

        echo json_encode($response);
    }
}

function get_group_users_lists($group = array()){

    $group_users = array();

    preg_match("/.+\((\d+)\)/", $group['group_name'] , $matches);
    $group_id = trim($matches[1]);

    //Get group id by group name
    $result = db_query("SELECT * FROM {node} n WHERE n.nid = :nid AND n.type = :type", array(":nid"=> $group_id , ":type"=> 'group'));
    $group = $result->fetchAssoc();

    //Filter user group lists
    $userinfo = db_query("SELECT * FROM {users} u ORDER BY created ASC")->fetchAll();

    foreach($userinfo as $key => $user){
        $user_details = user_load_multiple(array($user->uid));
        foreach($user_details as $ukey => $user_detail ){
            if(!in_array('administrator', $user_detail->roles)){
                if($user_detail->field_company_name['und'][0]['target_id'] == $group['nid']){
                    array_push($group_users, $user_detail);
                }
            }
        }

    }

    return $group_users;

}


function get_group_admin_user($group = array()){

    $group_users = array();

    preg_match("/.+\((\d+)\)/", $group['group_name'] , $matches);
    $group_id = trim($matches[1]);

    //Get group id by group name
    $result = db_query("SELECT * FROM {node} n WHERE n.nid = :nid AND n.type = :type", array(":nid"=> $group_id , ":type"=> 'group'));
    $group = $result->fetchAssoc();

    $user_details = user_load_multiple(array($group['uid']));
    foreach($user_details as $ukey => $user_detail ){
        if(!in_array('administrator', $user_detail->roles)){
            if($user_detail->field_company_name['und'][0]['target_id'] == $group['nid']){
                array_push($group_users, $user_detail);
            }
        }
    }

    return $group_users;

}

/**
 * Implement hook_form_user_register_form_alter().
 */
function group_registration_form_user_register_form_alter(&$form, &$form_state, $form_id) {

    unset($form['field_other_programs']['und'][0]['value']['#title']);
    unset($form['field_other_distributor']['und'][0]['value']['#title']);
    unset($form['field_other_sub_distributor']['und'][0]['value']['#title']);
    unset($form['field_other_programs']['und']['#title']);
    unset($form['field_other_distributor']['und']['#title']);
    unset($form['field_other_sub_distributor']['und']['#title']);
    unset($form['account']['name']['#description']);
    unset($form['account']['mail']['#description']);
   // $form['field_other_programs']['und'][0]['#suffix'] ='<span class="testing"></span>';
    $form['account']['pass']['#description'] = '<p>' . t("(At least 8 letters including 1 uppercase, 1 lowercase)") .'<p>';
    form_clear_error();
    $form['field_company_name']['#prefix'] = '<!--<div id="field-blocker" ></div>-->';
    $form['#validate'][] = 'group_registration_form_validation';
    drupal_set_title('');
    $form['actions']['submit']['#value'] = t('Register Now');
    $form['#submit'][] = 'create_company_group_on_user_registration';

}

/*
* User registration form custom module validation function
*/
function group_registration_form_validation (&$form, &$form_state ) {

    $email = $form_state['input']['mail'];
    if(!$email){
        form_set_error('mail' , 'Email Address cannot be empty.');
    }

    $pass = $form_state['values']['pass'];
    $pass_count = ($pass)? strlen($pass):0;
    if(!$pass){
       form_set_error('pass' , 'Password cannot be empty.');
    }else if($pass && ($pass_count >= 8 && $pass_count <= 20)){
        if(!preg_match('/^(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z$&+,:;=?@#|<>.-^*()%!]{8,20}$/', $pass)){
            form_set_error('pass',t('Password does not meet the requirement'));
        }
    }else{
        form_set_error('pass',t('Password does not meet the requirement'));
    }


    $field_motherboard_qty = $form_state['input']['field_motherboard_qty']['und'][0]['value'];
    if(!is_numeric($field_motherboard_qty) && !empty($field_motherboard_qty)){
        form_set_error('field_motherboard_qty' , 'Motherboard Qty accept only numeric values');
    }

    $field_contact_number = $form_state['input']['field_contact_number']['und'][0]['value'];
    if(!is_numeric($field_contact_number) && !empty($field_contact_number)){
        form_set_error('field_contact_number' , 'Contact Number accept only numeric values');
    }

    $field_participating_programs = $form_state['values']['field_participating_programs']['und'];
    if(!$field_participating_programs){
        form_set_error('field_participating_programs' , 'Please choose any one option');
    }else{
        $other_program = false;

        foreach($field_participating_programs as $programs_input){
            foreach($form_state['complete form']['field_participating_programs']['und']['#options'] as $pkey => $programs){
                if($pkey == $programs_input['tid'] && strtolower($programs) == 'other'){
                    $other_program = true;
                }
            }
        }

        if($other_program){
            empty($form_state['values']['field_other_programs']['und'][0]['value'])?
                form_set_error('field_other_programs' , 'Other cannot be empty') : '';
        }

    }

    $field_choose_distributor = $form_state['values']['field_choose_distributor']['und'];
    if(!$field_choose_distributor){
        form_set_error('field_choose_distributor' , 'Please choose any one option');
    }else{
        $other_distributor = false;
        foreach($field_choose_distributor as $distributor_input){
            foreach($form_state['complete form']['field_choose_distributor']['und']['#options'] as $dkey => $distributor){
                if($dkey == $distributor_input['tid'] && strtolower($distributor) == 'other'){
                    $other_distributor = true;
                }
            }
        }
        if($other_distributor){
            empty($form_state['values']['field_other_distributor']['und'][0]['value'])?
                form_set_error('field_other_distributor' , 'Other cannot be empty') : '';
        }

    }

    $field_choose_sub_distributor = $form_state['values']['field_choose_sub_distributor']['und'];
    if(!$field_choose_sub_distributor){
        form_set_error('field_choose_sub_distributor' , 'Please choose any one option');
    }else{
        $other_sub_distributor = false;
        foreach($field_choose_sub_distributor as $subdistributor_input){
            foreach($form_state['complete form']['field_choose_sub_distributor']['und']['#options'] as $sdkey => $sdistributor){
                if($sdkey == $subdistributor_input['tid'] && strtolower($sdistributor) == 'other'){
                    $other_sub_distributor = true;
                }
            }
        }
        if($other_sub_distributor){
            empty($form_state['values']['field_other_sub_distributor']['und'][0]['value'])?
                form_set_error('field_other_sub_distributor' , 'Other cannot be empty') : '';
        }

    }

    // Append custom error message element with content
    group_registration_errors_reset( $form );

}

function group_registration_errors_reset(&$element){

    // Check for errors and settings
    $errors = form_get_errors();

    if(!empty($_POST)){

        $group_id = null;
        if (preg_match("/.+\((\d+)\)/", $_POST['field_company_name']['und'][0]['target_id'] , $matches)) {
            $group_id =  $matches[1];
        }

        if (!$group_id){

            if(!check_group_title($_POST['field_company_name']['und'][0]['target_id'])) {
                $_SESSION['new_group_name'] = $_POST['field_company_name']['und'][0]['target_id'];
                if (!isset($_SESSION['new_group_name'])) {
                    $_SESSION['new_group_name'] = $_POST['field_company_name']['und'][0]['target_id'];
                }
            }else{
                form_set_error('field_company_name][und][0][target_id' , 'This company name is already exists. Plese select from auto complete company list.');
            }
        }

    }

    if( ! isset( $_SESSION[ 'messages' ] ) ) {
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += group_registration_errors_reset( $element[ $key ] );
        }
    }

    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            switch($element['#type']){

                case 'textfield':
                      $error_message = str_replace('3. ','',$error_message);
                      $error_message = str_replace('field is required','cannot be empty',$error_message);
                      break;
                case 'password_confirm':
                    $error_message = str_replace('field is required','cannot be empty',$error_message);
                    break;
                case 'checkboxes':
                      $error_message = str_replace($error_message ,'Please select at least one checkbox',$error_message);
                    break;
                case 'radio':
                      $error_message = str_replace($error_message ,'Please select any one option',$error_message);
                    break;
                case 'select':
                      $error_message = str_replace($error_message ,'Please select any one member type',$error_message);
                    break;

            }

            $element[ '#suffix' ] = '<span class="custom-error '.$element[ '#id' ].'" >'.$error_message.'</span>';

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }

    return $reset_errors;

}


/**
 * Custom submit function for user registration form
 */

function create_company_group_on_user_registration($form, &$form_state) {}

function check_group_title($group_title = null){

    if(!empty($group_title)) {

        $result = db_select('node', 'n')
        ->fields('n')
        ->condition('type', 'group' , '=')
        ->condition('title',  '%'.db_like($group_title).'%', 'LIKE')
        ->condition('status', 1,'=')
        ->execute()
        ->fetchAssoc();

        return ($result) ? true : false;
    }

    return false;

}

function check_group_id($group_id = null){

    if(!empty($group_id)) {

        $result = db_select('node', 'n')
            ->fields('n')
            ->condition('type', 'group' , '=')
            ->condition('nid', $group_id, '=')
            ->condition('status', 1,'=')
            ->execute()
            ->fetchAssoc();

        return ($result) ? true : false;
    }

    return false;

}

/*
 * Group Create
 */
function group_registration_user_presave(&$edit, $account, $category) {

    if(isset($_SESSION['new_group_name']) && !empty($_SESSION['new_group_name'])){

        $group_name = $_SESSION['new_group_name'];

        if (!check_group_title($group_name)) {// dont forget to add your conditions

            $node = new stdClass();
            $node->type     = "group";
            $node->uid      = $account->uid;
            $node->title    = t($group_name);
            $node->body     = t($group_name . " Group");
            $node->status       = 1; //(1 or 0): published or not
            $node->promote      = 0; //(1 or 0): promoted to front page
            $node->comment      = 1; //2 = comments on, 1 = comments off

            $node->og_description   = t("$group_name handle by $account->name");
            $node->og_register  = 0;
            $node->og_directory = 0;
            $node->og_private   = 1;
            $node->og_selective = 3;

            $node = node_submit($node);
            node_save($node);

            $group_id = $node->nid;

            $edit['field_company_name']['und'][0]['target_id'] = $group_id;

        }

    }

}

/*
 * Assign a user to Group
 */
function group_registration_user_insert(&$edit, $account, $category){

    if(isset($_SESSION['new_group_name'])  && !empty($_SESSION['new_group_name'])){
        $nid = $account->field_company_name['und'][0]['target_id'];

        $node = node_load($nid);
        if (isset($node)) {
            $node->uid = $account->uid;
            $node->og_description   = t($_SESSION['new_group_name'] ." handle by $account->name");
            node_save($node);

            $member_type = 2;
            foreach($account->user_roles as $role_id => $role_name){
                $member_type = $role_id;
            }

            //Adding company information to separate table.
            $data_insert = array(
                'nid' => $nid,
                'uid' => $account->uid,
                'name' => $_SESSION['new_group_name'],
                'member_type' => $member_type,
                'business_address_1' => $account->field_business_address_1['und'][0]['value'],
                'city' => $account->field_company_city['und'][0]['value'],
                'state' => $account->field_company_state['und'][0]['value'],
                'country' => $account->field_country['und'][0]['tid'],
                'zip' => $account->field_company_zip_code['und'][0]['value'],
                'status' => 1,
                'updated' => date('Y-m-d H:i:s'),
                'data' => serialize($account)
            );

            if(isset($account->field_business_address_2['und'][0]['value']) && !empty($account->field_business_address_2['und'][0]['value'])) {
               $data_insert['business_address_2'] = $account->field_business_address_2['und'][0]['value'];
            }

            db_insert('company')->fields($data_insert)->execute();

            unset($_SESSION['new_group_name']);
        }
    }else{

        $gid = $account->field_company_name['und'][0]['target_id'];

        //print_pre($account,1);
        $user_account = user_load($account->uid);

        $values = array(
            "entity_type" => 'user',
            "entity" => $user_account,
            "state" => OG_STATE_ACTIVE,
        );

        $og_membership = og_group('node', $gid , $values, TRUE);

        // Changes the users role in the group (1 = non-member, 2 = member, 3 = administrator member)
        og_role_grant('node', $gid, $account->uid, 2);
    }


    //Subscribe member to Mailchimp mailing lists
    $subscription = $account->field_receive_newsletter['und'][0]['subscribe'];
    $pcn_subscription = $account->field_product_change_notices_sub['und'][0]['subscribe'];

    if($subscription){

        $country_name = isset($account->field_country['und'][0]['tid'])? taxonomy_term_load($account->field_country['und'][0]['tid'])->name : 'United States';

        //Get mailchimp list based on country
        $mail_list_name = ($country_name == 'United States') ? 'Test_email' : 'Test_email';

        subscribe_member_to_mailchimp_mailing_lists($account, $mail_list_name);
    }
    //Subscription for Product Change Notices
     if($pcn_subscription){

            //Mailing list for product change notice
            $mail_list_name = 'Product Change Notice';

            subscribe_member_to_mailchimp_mailing_lists($account, $mail_list_name);
        }

    $params['account'] = $account;
    //drupal_mail('user', 'register_pending_approval_admin', variable_get('site_mail', ini_get('sendmail_from')), language_default(), $params);
}

/*
 * Subscribe member to Mailchimp mailing lists
 * @param $user
 */
function subscribe_member_to_mailchimp_mailing_lists($account , $list_name = null){

    //Get all mailchimp lists
    $mailchimp_lists = mailchimp_get_lists(array());

    $mail_list_id = null;

    foreach ($mailchimp_lists as $mail_key => $list){

        //Compare lists name with exists mailchimp lists
        if(!empty($list->id) && $list->name == trim($list_name)){
            $mail_list_id = $list->id;
        }
    }

    //Add/subscribe user email id to specific mailchimp list
    if($mail_list_id){
        $process_response = mailchimp_subscribe($mail_list_id, $account->mail);

        if($process_response){
            return true;
        }else{
            return false;
        }
    }

    return false;

}


/**
 * Remove a role from a user.
 *
 * @param $user
 *   User object or user ID.
 * @param $role_name
 *   String value of role to be removed.
 */
/*function group_registration_user_update(&$edit, $account, $category) {

    $role_name = 'New Users';
    $role = user_role_load_by_name($role_name);
    $rid = $role->rid;
    $urid = null;
    if ($role && user_has_role($role->rid, $account)) {
        $urid = $rid;
    }

    if ($urid && $account->status == 1 && $category== 'account') {
        if ($urid != FALSE) {

            // Make a copy of the roles array, without the deleted one.
            foreach($account->roles as $id => $name) {

                if ($id == $urid) {
                    // remove the new user role
                    db_delete('users_roles')
                        ->condition('uid', $account->uid)
                        ->condition('rid', $rid)
                        ->execute();

                }
            }
        }
    }
}*/

?>
