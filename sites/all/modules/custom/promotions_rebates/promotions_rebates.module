<?php

function get_default_cloumn_title_of_import_excel($charCase = false)
{

    $column_title = array('GIGABYTE Model',
        'GIGABYTE Model Url',
        'Chipset',
        'Stable Model',
        'ITP Points',
        'Intel SBA',
        'Promotion IR');

    if($charCase){
        foreach ($column_title as $key => $value){
            $column_title[$key] = strtolower($value);
        }
    }

    return $column_title;

}


function promotions_rebates_init(){

    drupal_add_js(drupal_get_path('module', 'custom').'/promotions_rebates/js/promotions_rebates.js',array('scope' => 'footer'));
}


/**
 * Implements hook_node_insert().
 */
function promotions_rebates_node_insert($node) {
    // Set the URL alias

    if (isset($node) && $node->type == 'promotion_rebates') {

         $term = taxonomy_term_load($node->field_promotion_type['und'][0]['tid']);
         $path = array(
             'source' => 'node/' . $node->nid,
             'alias' => 'partner/promotions/'. $term->name. '/'. $node->field_promotion_url['und'][0]['value'],
             'language' => isset($node->language) ? $node->language : LANGUAGE_NONE,
         );
         path_save($path);
    }
}

// Alter the webform elements
function promotions_rebates_form_promotion_rebates_node_form_alter(&$form, &$form_state, $form_id)
{

    $form['options']['promote']['#value'] = 0;
    $form['options']['status']['#value'] = 0;
    unset($form['ajax-submit']['#ajax']);
    $form['ajax-submit']['#value'] ='Submit';
    $form['ajax-submit']['#submit'][] ='create_promotions_and_rebates_content';
    //$form['#validate'][] = 'promotions_rebates_form_validation';
    //$form['#submit'][] = 'create_awards_and_reviews_content';;
}

function get_promotion_excel_records(){

    $query = db_select('promotion_excel_records', 'per');
    $query->fields('per', array(
        'eid',
        'nid',
        'filename',
        'filepath',
        'data',
        'status',
        'created',
        'updated',
    ));

    $query->condition('status', '0'); //ORDER BY created
    $query->orderBy('created', 'DESC'); //ORDER BY created
    $query->range(0,2); //LIMIT to 2 records

    $records = $query->execute()->fetchObject();

    $data = unserialize($records->data);

    return $data;

}

function create_promotions_and_rebates_content(&$form, &$form_state) {

    global $base_url;

    $node = node_load($form_state['values']['nid']);

    if(isset($node->field_promotion_excel['und']) && !empty($node->field_promotion_excel['und'])) {

        $lib = $_SERVER['DOCUMENT_ROOT'] . '/gigabyte' . '/' . libraries_get_path('Classes');

        $file_to_include = drupal_realpath($node->field_promotion_excel['und'][0]['uri']);
        //$file_to_include = $_SERVER['DOCUMENT_ROOT'] . '/gigabyte' . '/' . libraries_get_path('Classes') . '/Jan_2016_Promotion.xls';

        //Load PHPexcel Library
        include $lib . '/PHPExcel/IOFactory.php';

        $inputFileName = $file_to_include;

        $objReader = PHPExcel_IOFactory::createReader('Excel5');
        $objPHPExcel = PHPExcel_IOFactory::load($inputFileName);
        $worksheetList = $objReader->listWorksheetNames($inputFileName);

        //Read excel sheet informations based on individual sheet name
        $i = 0;
        $sheetData = array();
        while ($objPHPExcel->setActiveSheetIndex($i) && $i < count($worksheetList) - 1) {
            $sheetname = $worksheetList[$i];
            $sheetData[$sheetname] = $objPHPExcel->getActiveSheet()->toArray(null, true, true, true);
            $i++;
        }

        $name = "Gigabyte Authorized Distributors";
        $terms = get_gigabyte_authorized_distributors_taxonomy_by_name($name);

        //Create an array for exists distributor lists , get from taxonomy
        $distributors = array();
        $distributors_options = array();
        foreach ($terms as $t => $term) {
            $distributors[] = strtolower($term->name);
            $distributors_options[$term->tid]['lname'] = strtolower($term->name);
            $distributors_options[$term->tid]['name'] = $term->name;
        }

        //Get excel sheets column title
        $column_title = get_default_cloumn_title_of_import_excel(true);

        $error = array();

        /*
         * Checks sheets column title with exists column title array
         * if column title same as defined column name, it will be allow to save this sheets records with present node.
         * Otherwise this sheet information through from excel sheet records
         */
        foreach ($sheetData as $sname => $sheetinfo) {

            foreach ($sheetinfo as $rowkey => $details) {
                if ($rowkey == 1) {
                    //Checks the column title with exists distributor name
                    if (count($column_title) == count($details)) {
                        foreach ($details as $column => $val) {
                            if (!in_array(strtolower($val), $column_title)) {
                                $error['not_a_column'][$sname][$column]['sheetName'] = $sname;
                                $error['not_a_column'][$sname][$column]['errorColumn'] = $val;
                            }
                        }
                    } else {
                        $error['columnName'][$sname][$rowkey]['sheetName'] = $sname;
                        $error['columnName'][$sname][$rowkey]['errorColumn'] = count($details) . ' columns';
                    }
                }
            }
        }


        /*
         * Checks sheets name with exists distributor lists array
         * if the sheet name same as distributor lists name, it will be allow to save this sheets records with present node.
         * Otherwise this sheet information unset from excel sheet records array
         */

        $sheetName = $worksheetList;
        $n = 0;
        for ($n = 0; $n <= count($sheetName) - 1; $n++) {
            if (!in_array(strtolower($sheetName[$n]), $distributors)) {
                $error['sheetname'][] = $sheetName[$n];
                $dname = $sheetName[$n];
                unset($sheetName[$n]);
                unset($sheetData[$dname]);
            }
        }

        if(!$error) {

            foreach ($sheetData as $dis_name => $info) {

                $terms = taxonomy_get_term_by_name($dis_name, 'gigabyte_authorized_distributors');

                $term_id = null;
                foreach ($terms as $tid => $term) {
                    $term_id = $tid;
                }

                $distributors_tax = taxonomy_term_load($term_id);

                $dist_value = array('tid' => $term_id, 'taxonomy_term' => $distributors_tax);

                // you should have $node here
                $field_collection_value = entity_create('field_collection_item', array('field_name' => 'field_distributor_promotion_deta'));
                $field_collection_value->field_prmotion_distributors['und'][0] = $dist_value;
                // Attach to the node
                $field_collection_value->setHostEntity('node', $node);
                $field_collection_value->save();

                $program_details = $info;
                unset($program_details[1]);
                $program_details_items_count = count($program_details);

                $field_promotion_notes_item = entity_create('field_collection_item', array('field_name' => 'field_promotion_notes'));
                // Attach to the field collection item
                $field_promotion_notes_item->setHostEntity('field_collection_item', $field_collection_value);
                $field_promotion_notes_item->save();

                for ($i = 1; $i <= $program_details_items_count; $i++) {

                    $field_promotion_details_item = entity_create('field_collection_item', array('field_name' => 'field_promotion_details'));

                    $promotion_details = $program_details[$i + 1];

                    //Assign promotion details to field collection item
                    $field_promotion_details_item->field_gigabyte_model['und'][0]['value'] = $promotion_details['A'];
                    $field_promotion_details_item->field_gigabyte_model_url['und'][0]['url'] = $promotion_details['B'];
                    $field_promotion_details_item->field_gigabyte_chipset['und'][0]['value'] = $promotion_details['C'];
                    $field_promotion_details_item->field_stable_model['und'][0]['value'] = $promotion_details['D'];
                    $field_promotion_details_item->field_itp_points['und'][0]['value'] = $promotion_details['E'];
                    $field_promotion_details_item->field_intel_sba['und'][0]['value'] = $promotion_details['F'];
                    $field_promotion_details_item->field_instant_rebate['und'][0]['value'] = $promotion_details['G'];

                    // Attach to the field collection item
                    $field_promotion_details_item->setHostEntity('field_collection_item', $field_collection_value);
                    $field_promotion_details_item->save();

                }
            }
        }else{

            $error_message = null;
            foreach ($error['not_a_column'] as $sheet_name => $column){
                foreach ($column as $col => $err){
                    $error_message .=  $sheet_name . '- has following column error. ('.$err['errorColumn'].') </br>';
                }
            }

            drupal_set_message('Import excel file has errors, Please check and provide the excel file in a proper format. <br> '.$error_message ,'error');
        }
    }

    $form_state['values']['promote'] = 0;
    $current_url = url(current_path(), array('absolute' => TRUE));
    $form_state['redirect'] = $current_url;
}

function promotions_rebates_form_validation(&$form, &$form_state){
    // Append custom error message element with content
    //promotions_rebates_errors_reset($form);
}

function promotions_rebates_errors_reset(&$element){

    // Check for errors and settings
    $errors = form_get_errors();

    if( ! isset( $_SESSION[ 'messages' ] ) ) {
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += promotions_rebates_errors_reset( $element[ $key ] );
        }
    }

    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            switch($element['#type']){

                case 'textfield':
                      $error_message = str_replace('field is required', 'cannot be empty' ,$error_message);
                      break;
                case 'file':
                      $error_message = isset($errors['field_award_image_und_0'])?
                            'Invalid file format, Only files with the following extensions are allowed: png gif jpg jpeg':
                            $error_message;
                      unset($errors['field_award_image_und_0']);
                      break;
            }

            $element[ '#suffix' ] = '<span class="custom-error '.$element[ '#id' ].'" >'.$error_message.'</span>';

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }

    return $reset_errors;

}

/**
 * Implements hook_theme().
 */
function promotions_rebates_theme(){

    $path = drupal_get_path('module', 'promotions_rebates') . '/templates';

    return array(
        'promotion_rebates_view' => array(
            'path' => $path,
            'template' => 'promotions-rebates-view',
            'variables' => array('node' => NULL),
        ),
        'promotion_upload_view' => array(
            'path' => $path,
            'template' => 'promotions-upload-view',
            'variables' => array('promotions' => NULL, 'distributors' => NULL),
        )
    );
}


/*function promotions_rebates_views_pre_render(&$view){
    return $view;
}*/


function template_preprocess_promotion_rebates_view(&$variables){

    $term_name = null;

    $term_id = null;

    $terms = null;

    //Checks term name from current url
    if(!empty(arg(2)) && !is_numeric(arg(2))){

        $term_name = arg(2);

        //Load taxonomy by name
        $single_term = taxonomy_get_term_by_name($term_name , $vocabulary = NULL);

        if($single_term){

            foreach ($single_term as $key => $term){

                if($term->vocabulary_machine_name == 'gigabyte_authorized_distributors'){
                    $term_id = $term->tid;
                }
            }
        }
    }

    if(!$term_id) {

        //Get all distributor terms to display if individual term name not in url
        $name = "Gigabyte Authorized Distributors";

        $terms = get_gigabyte_authorized_distributors_taxonomy_by_name($name);
    }

    //Get field collections items by custom field collection item name
    $items = field_get_items('node', $variables['node'] , 'field_distributor_promotion_deta');

    $promotions = array();
    $banner = array();
    $records = array();
    
    foreach ($items as $item) {


            $fc = field_collection_item_load($item['value']);

            $records[$fc->field_prmotion_distributors['und'][0]['tid']] = 1;

        if($fc->field_prmotion_distributors['und'][0]['tid'] == $term_id) {

            $banner['promo'] = $fc->field_distributor_promo_banner;

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['tid'] = $fc->field_prmotion_distributors['und'][0]['tid'];

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['term'] = $fc->field_prmotion_distributors['und'][0]['taxonomy_term'];

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['banner'] = $fc->field_distributor_promo_banner;

            $promotion_details = array();
            foreach ($fc->field_promotion_details['und'] as $key => $val) {

                $field_items = field_collection_item_load($val['value']);

                $details = array();
                $details['model'] = isset($field_items->field_gigabyte_model['und'][0])? $field_items->field_gigabyte_model['und'][0]['value']:'-';
                $details['model_url'] = isset($field_items->field_gigabyte_model_url['und'][0])? $field_items->field_gigabyte_model_url['und'][0]['url']:'-';
                $details['chipset'] = isset($field_items->field_gigabyte_chipset['und'][0])? $field_items->field_gigabyte_chipset['und'][0]['value'] :'-';
                $details['stable'] = isset($field_items->field_stable_model['und'][0])? $field_items->field_stable_model['und'][0]['value']:'-';
                $details['points'] = isset($field_items->field_itp_points['und'][0])? $field_items->field_itp_points['und'][0]['value']:'-';
                $details['intel_sba'] = isset($field_items->field_intel_sba['und'][0])? $field_items->field_intel_sba['und'][0]['value']:'-';
                $details['rebate'] = isset($field_items->field_instant_rebate['und'][0]) ? $field_items->field_instant_rebate['und'][0]['value']:'-';

                $promotion_details[$key] = $details;
            }
            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['promotions'] = $promotion_details;

            $promotion_notes = array();

            if(isset($fc->field_promotion_notes['und'])) {
                foreach ($fc->field_promotion_notes['und'] as $nkey => $nval) {

                    $field_items = field_collection_item_load($nval['value']);

                    $promotion_notes[$nkey] = isset($field_items->field_promotion_notes_sub['und'][0]) ? $field_items->field_promotion_notes_sub['und'][0]['value'] : '';

                }
            }

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['notes'] = $promotion_notes;
        }

    }

    $variables['promotion_records'] = $records;
    $variables['terms'] = $terms;
    $variables['promotions'] = $promotions;
    $variables['banner'] = $banner;

}

function get_gigabyte_authorized_distributors_taxonomy_by_name($name  = NULL){

    $query = db_select('taxonomy_vocabulary', 'tv');
    $query->fields('tv', array(
        'machine_name',
        'vid',
    ));
    $query->condition('tv.name', $name, '=');
    $vocabulary_obj = $query->execute()->fetchObject();

    $terms = taxonomy_get_tree($vocabulary_obj->vid);

    foreach ($terms as $key => $term){
        $terms[$key]->term = taxonomy_term_load($term->tid);
    }

    return $terms;

}


/**
 * @file
 * Testing functionality for Wysiwyg module.
 */

/**
 * Implements hook_menu().
 */
function promotions_rebates_menu() {

    $items['promotions/get/termdata'] = array(
        'title' => 'Get term data',
        'page callback' => 'promotions_rebates_get_term_data',
        'access callback' => TRUE,
    );
    return $items;
}

/**
 * Get the Image URL of the term selected
 */
function promotions_rebates_get_term_data(){
    global $base_url;
    if(empty($_POST['termid'])){
        echo "Term Cannot be Empty";
    }
    $term = taxonomy_term_load($_POST['termid']);
    $image = $base_url.'/sites/default/files/'.str_replace('public://','',$term->field_distributor_image['und'][0]['uri']);
    echo $image;
}

