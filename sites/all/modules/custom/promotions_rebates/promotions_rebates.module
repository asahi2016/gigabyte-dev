<?php

function get_default_cloumn_title_of_import_excel($charCase = false)
{

    $column_title = array('GIGABYTE Model',
        'GIGABYTE Model Url',
        'Chipset',
        'Stable Model',
        'ITP Points',
        'Intel SBA',
        'Promotion IR');

    if($charCase){
        foreach ($column_title as $key => $value){
            $column_title[$key] = strtolower($value);
        }
    }

    return $column_title;

}


function promotions_rebates_init(){

    drupal_add_js(drupal_get_path('module', 'custom').'/promotions_rebates/js/promotions_rebates.js',array('scope' => 'footer'));
}


/**
 * Implements hook_node_insert().
 */
function promotions_rebates_node_insert($node) {
    // Set the URL alias

    if (isset($node) && $node->type == 'promotion_rebates') {

         $term = taxonomy_term_load($node->field_promotion_type['und'][0]['tid']);
         $path = array(
             'source' => 'node/' . $node->nid,
             'alias' => 'partner/promotions/'. $term->name. '/'. $node->field_promotion_url['und'][0]['value'],
             'language' => isset($node->language) ? $node->language : LANGUAGE_NONE,
         );
         path_save($path);
    }
}

// Alter the webform elements
function promotions_rebates_form_promotion_rebates_node_form_alter(&$form, &$form_state, $form_id){

    $form['options']['promote']['#value'] = 0;
    unset($form['ajax-submit']['#ajax']);
    $form['ajax-submit']['#value'] ='Submit';
    $form['ajax-submit']['#submit'][] ='create_promotions_and_rebates_content';
    //$form['#validate'][] = 'promotions_rebates_form_validation';
    //$form['#submit'][] = 'create_awards_and_reviews_content';;
}

function create_promotions_and_rebates_content(&$form, &$form_state) {

    $form_state['values']['promote'] = 0;
    $current_url = url(current_path(), array('absolute' => TRUE));
    $form_state['redirect'] = $current_url;
}

function promotions_rebates_form_validation(&$form, &$form_state){
    // Append custom error message element with content
    //promotions_rebates_errors_reset($form);
}

function promotions_rebates_errors_reset(&$element){

    // Check for errors and settings
    $errors = form_get_errors();

    if( ! isset( $_SESSION[ 'messages' ] ) ) {
        return;
    }

    $reset_errors = array();

    // Recurse through all children.
    foreach( element_children( $element ) as $key ) {
        if( isset( $element[ $key ] ) && $element[ $key ] ) {
            $reset_errors += promotions_rebates_errors_reset( $element[ $key ] );
        }
    }

    $element_id = implode( '][', $element[ '#parents' ] );

    if ( !empty( $errors[ $element_id ] )) {
        $error_message = $errors[ $element_id ];

        // Get error id
        $error_id = array_search( $error_message, $_SESSION[ 'messages' ][ 'error' ] );

        if( $error_id !== FALSE ) {
            unset( $_SESSION[ 'messages' ][ 'error' ][ $error_id ] );
            $_SESSION[ 'messages' ][ 'error' ] = array_values( $_SESSION[ 'messages' ][ 'error' ]  );

            if( count( $_SESSION[ 'messages' ][ 'error' ] ) <= 0 ) {
                unset( $_SESSION[ 'messages' ][ 'error' ] );
            }

            switch($element['#type']){

                case 'textfield':
                      $error_message = str_replace('field is required', 'cannot be empty' ,$error_message);
                      break;
                case 'file':
                      $error_message = isset($errors['field_award_image_und_0'])?
                            'Invalid file format, Only files with the following extensions are allowed: png gif jpg jpeg':
                            $error_message;
                      unset($errors['field_award_image_und_0']);
                      break;
            }

            $element[ '#suffix' ] = '<span class="custom-error '.$element[ '#id' ].'" >'.$error_message.'</span>';

            $reset_errors[ $element[ '#id' ] ] = $error_message;
        }
    }

    return $reset_errors;

}

/**
 * Implements hook_theme().
 */
function promotions_rebates_theme(){

    $path = drupal_get_path('module', 'promotions_rebates') . '/templates';

    return array(
        'promotion_rebates_view' => array(
            'path' => $path,
            'template' => 'promotions-rebates-view',
            'variables' => array('node' => NULL),
        ),
        'promotion_upload_view' => array(
            'path' => $path,
            'template' => 'promotions-upload-view',
            'variables' => array('promotions' => NULL, 'distributors' => NULL),
        )
    );
}


/*function promotions_rebates_views_pre_render(&$view){
    return $view;
}*/


function template_preprocess_promotion_rebates_view(&$variables){

    $term_name = null;

    $term_id = null;

    $terms = null;

    //Checks term name from current url
    if(!empty(arg(2)) && !is_numeric(arg(2))){

        $term_name = arg(2);

        //Load taxonomy by name
        $single_term = taxonomy_get_term_by_name($term_name , $vocabulary = NULL);

        if($single_term){

            foreach ($single_term as $key => $term){

                if($term->vocabulary_machine_name == 'gigabyte_authorized_distributors'){
                    $term_id = $term->tid;
                }
            }
        }
    }

    if(!$term_id) {

        //Get all distributor terms to display if individual term name not in url
        $name = "Gigabyte Authorized Distributors";

        $terms = get_gigabyte_authorized_distributors_taxonomy_by_name($name);
    }

    //Get field collections items by custom field collection item name
    $items = field_get_items('node', $variables['node'] , 'field_distributor_promotion_deta');

    $promotions = array();
    $banner = array();
    $records = array();
    
    foreach ($items as $item) {


            $fc = field_collection_item_load($item['value']);

            $records[$fc->field_prmotion_distributors['und'][0]['tid']] = 1;

        if($fc->field_prmotion_distributors['und'][0]['tid'] == $term_id) {

            $banner['promo'] = $fc->field_distributor_promo_banner;

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['tid'] = $fc->field_prmotion_distributors['und'][0]['tid'];

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['term'] = $fc->field_prmotion_distributors['und'][0]['taxonomy_term'];

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['banner'] = $fc->field_distributor_promo_banner;

            $promotion_details = array();
            foreach ($fc->field_promotion_details['und'] as $key => $val) {

                $field_items = field_collection_item_load($val['value']);

                $details = array();
                $details['model'] = $field_items->field_gigabyte_model['und'][0]['value'];
                $details['model_url'] = $field_items->field_gigabyte_model_url['und'][0]['url'];
                $details['chipset'] = $field_items->field_gigabyte_chipset['und'][0]['value'];
                $details['stable'] = $field_items->field_stable_model['und'][0]['value'];
                $details['points'] = $field_items->field_itp_points['und'][0]['value'];
                $details['intel_sba'] = $field_items->field_intel_sba['und'][0]['value'];
                $details['rebate'] = $field_items->field_instant_rebate['und'][0]['value'];

                $promotion_details[$key] = $details;
            }
            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['promotions'] = $promotion_details;

            $promotion_notes = array();
            foreach ($fc->field_promotion_notes['und'] as $nkey => $nval) {

                $field_items = field_collection_item_load($nval['value']);

                $promotion_notes[$nkey] = $field_items->field_promotion_notes_sub['und'][0]['value'];

            }

            $promotions[$fc->field_prmotion_distributors['und'][0]['tid']]['notes'] = $promotion_notes;
        }

    }

    $variables['promotion_records'] = $records;
    $variables['terms'] = $terms;
    $variables['promotions'] = $promotions;
    $variables['banner'] = $banner;

}

function get_gigabyte_authorized_distributors_taxonomy_by_name($name  = NULL){

    $query = db_select('taxonomy_vocabulary', 'tv');
    $query->fields('tv', array(
        'machine_name',
        'vid',
    ));
    $query->condition('tv.name', $name, '=');
    $vocabulary_obj = $query->execute()->fetchObject();

    $terms = taxonomy_get_tree($vocabulary_obj->vid);

    foreach ($terms as $key => $term){
        $terms[$key]->term = taxonomy_term_load($term->tid);
    }

    return $terms;

}


/**
 * @file
 * Testing functionality for Wysiwyg module.
 */

/**
 * Implements hook_menu().
 */
function promotions_rebates_menu() {

    $items['promotions/ajax'] = array(
        'title' => 'Ajaxified form',
        'page callback' => 'promotions_rebates_ajax_form',
        'access callback' => TRUE,
    );
    return $items;
}

/**
 * Form constructor for an ajaxified form lazy-loading a textarea.
 */
function promotions_rebates_ajax_form($form, &$form_state) {

    //Node add page from specific content type
    /*if (!function_exists('node_add')) {
        module_load_include('inc', 'node', 'node.pages');
    }
    $nodeform = node_add('promotion_rebates');*/

    $lib = $_SERVER['DOCUMENT_ROOT'] . '/gigabyte'. '/' . libraries_get_path('Classes');
    $file_to_include = $_SERVER['DOCUMENT_ROOT'] . '/gigabyte'. '/' . libraries_get_path('Classes').'/Jan_2016_Promotion.xls';

    /** PHPExcel_IOFactory */
    include $lib.'/PHPExcel/IOFactory.php';

    $inputFileName = $file_to_include;

    $objReader = PHPExcel_IOFactory::createReader('Excel5');
    $objPHPExcel = PHPExcel_IOFactory::load($inputFileName);
    $worksheetList = $objReader->listWorksheetNames($inputFileName);

    $i = 0;
    $sheetData = array();
    while ($objPHPExcel->setActiveSheetIndex($i) && $i < count($worksheetList) - 1){
        $sheetname = $worksheetList[$i];
        $sheetData[$sheetname] = $objPHPExcel->getActiveSheet()->toArray(null,true,true,true);
        $i++;
    }

    $name = "Gigabyte Authorized Distributors";

    $terms = get_gigabyte_authorized_distributors_taxonomy_by_name($name);

    $distributors = array();
    $distributors_options = array();
    foreach ($terms as $t => $term){
        $distributors[] = strtolower($term->name);
        $distributors_options[$term->tid]['lname'] = strtolower($term->name);
        $distributors_options[$term->tid]['name'] = $term->name;
    }

    $column_title = get_default_cloumn_title_of_import_excel(true);

    $error = array();

    foreach ($sheetData as $sname => $sheetinfo){
        foreach ($sheetinfo as $rowkey => $details){
            if($rowkey == 1) {
                if(count($column_title) == count($details)) {
                    foreach ($details as $column => $val) {
                        if (!in_array(strtolower($val), $column_title)) {
                            $error['not_a_column'][$sname][$column]['sheetName'] = $sname;
                            $error['not_a_column'][$sname][$column]['errorColumn'] = $val;
                        }
                    }
                }else{
                    $error['columnName'][$sname][$rowkey]['sheetName'] = $sname;
                    $error['columnName'][$sname][$rowkey]['errorColumn'] = count($details) .' columns';
                }
            }
        }
    }


    $sheetName = $worksheetList;
    $n = 0;
    for($n = 0; $n<=count($sheetName)-1; $n++){
        if(!in_array(strtolower($sheetName[$n]) ,$distributors)){
            $error['sheetname'][] = $sheetName[$n];
            $dname = $sheetName[$n];
            unset($sheetName[$n]);
            unset($sheetData[$dname]);
        }
    }


    if($error){
       print theme('promotion_upload_view', array('promotions' => $sheetData, 'distributors' => $distributors_options));
    }
}

