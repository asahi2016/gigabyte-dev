<?php

if(!function_exists('node_add')){
    module_load_include('inc','node','node.pages');
}


function assets_submission_init(){
   // drupal_set_message('Assets Submission');
    drupal_add_js(drupal_get_path('module', 'custom').'/assets_submission/js/submissions.js');
    drupal_add_js(drupal_get_path('module', 'custom').'/assets_submission/js/display_colorbox.js');
}

function print_pre($array = array() , $exit = false){

    echo '<pre>';
    print_r($array);
    echo '</pre>';

    if($exit){
        exit;
    }

}

function assets_submission_menu(){

    $items['view/submissions'] = array(
        'page callback' => 'display_user_assets_submission', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
        'file' => 'includes/assets_submission_page.inc',
    );

    $items['partner/update/submission/comment'] = array(
        'page callback' => 'update_submission_comment', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
        'file' => 'includes/assets_submission_page.inc',
    );

    $items['partner/update/submission/status'] = array(
        'page callback' => 'update_submission_status_by_admin', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
        'file' => 'includes/assets_submission_page.inc',
    );

    return $items;

}


function display_user_assets_submission(){
    return theme('view_user_submissions', array());
}

/**
 * Implements hook_theme().
 */

function assets_submission_theme() {

    $path = drupal_get_path('module', 'assets_submission') . '/templates';

    return array('view_user_submissions' => array(
        'path' => $path,
        'template' => 'view-user-submissions',
        'variables' => array(),
    )
    );
}


function assets_submission_block_view_alter(&$data, $block) {

   //print_pre($block);

}


function template_preprocess_view_user_submissions(&$variables){

    global $user;
    $uid = $user->uid;
    $node_type = 'submission';

    $nodes = array();

    $admin = false;
    if (in_array('administrator', $user->roles)) {
        $admin = true;
    }

    if($admin){
        $nids = db_query('SELECT nid FROM {node}  WHERE  type = :type', array(':type' => $node_type))->fetchCol();
    }else {
        $nids = db_query('SELECT nid FROM {node} WHERE uid = :uid AND type = :type', array(':uid' => $uid, ':type' => $node_type))->fetchCol();
    }
    if (!empty($nids)) {
        $nodes = node_load_multiple($nids);
    }

    $show_taxonomy_terms = module_exists('taxonomy') &&
        variable_get('revisioning_show_taxonomy_terms', TRUE) && (count(taxonomy_get_vocabularies()) > 0);

    module_load_include('inc','revisioning','revisioning_api');

    $node_revisions = array();
    foreach($nodes as $nid => $node){
        $node_revisions[$nid]['submissions'] = _revisioning_get_all_revisions_for_node($node->nid , $show_taxonomy_terms);
    }

    unset($nid);



    foreach ($node_revisions as $nid => $revisions) {

        $node_revisions[$nid]['root'] = node_load_multiple(array($nid));
        foreach ($revisions['submissions'] as $rid => $revision) {

            $node_revisions[$nid]['submissions'][$rid]->node = node_load($nid , $rid);
            $node_revisions[$nid]['submissions'][$rid]->user = user_load_multiple(array($revision->uid));
            //print_pre($revision);

            /*$vid = $revision->vid;
            if ($vid == $revision->current) {
                $title = $revision->title;
                $published = $revision->status;
            }
            // No text next to check boxes (see below).
            $revision_ids[$vid] = '';
            $base_url = "node/$nid/revisions/$vid";*/
        }

        $node_revisions[$nid]['root']['comment'] = comment_load($node_revisions[$nid]['root'][$nid]->cid);
    }

    //print_pre($node_revisions,1);
    //print_pre($node_revisions,1);
    $variables['submissions_lists'] = $node_revisions;

    return $variables;
    //print_pre($variables,1);

}

function assets_submission_form_submission_node_form_alter(&$form, &$form_state, $extra){

    $form['new_submission'] = array(
        '#prefix' => '<div class="new-submission-form" style="float: left">',
        '#suffix' => '</div>',
        '#markup' => '<input id="new-submission" type="button" value="New Submission">',
        '#weight' => -10,
    );
    $form['ajax-submit']['#value'] = 'Submit';

   // $form['#attributes']['class'][] = 'group4';
    $form['#prefix'] = '<div class="submission-form">';
    $form['#suffix'] = '</div>';

    //print_pre($form['#attributes']['class'],1);

}


function assets_submission_node_submit($node, $form, &$form_state) {

   // print_pre($node);

    $nid = null;
    if(isset($_COOKIE['submissionNode']) && !empty($_COOKIE['submissionNode'])){
        $nid = $_COOKIE['submissionNode'];
    }

    if($nid) {
        // Programatically load the existing revision and save it
        // Taken from http://api.drupal.org/api/drupal/modules!node!node.module/function/node_save/7
        $new_revision = node_load($nid);

        //print_pre($new_revision,1);

        // Make any changes to the new revision here...
        $new_revision->title = $node->title;
        //$new_revision->created = $node->created;
        //$new_revision->changed = $node->changed;
        $new_revision->revision = 1;
        $new_revision->body = $node->body;
        $new_revision->field_submission_image = $node->field_submission_image;
        $new_revision->log = t($node->title. 'is new submission of' .$new_revision->type);

        // Save the new revision first
        node_save($new_revision);

        watchdog('content', '@type: reverted %title submission %revision.', array('@type' => $new_revision->type, '%title' => $new_revision->title, '%revision' => $new_revision->vid));
        drupal_set_message(t('@type %title was saved with a new submission', array('@type' => node_type_get_name($new_revision), '%title' => $new_revision->title)));
        unset($_COOKIE['submissionNode']);
        drupal_goto('view/submissions');
    }
   
}

?>