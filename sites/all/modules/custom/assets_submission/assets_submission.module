<?php

if(!function_exists('node_add')){
    module_load_include('inc','node','node.pages');
}


function assets_submission_init(){
   // drupal_set_message('Assets Submission');
    drupal_add_js(drupal_get_path('module', 'custom').'/assets_submission/js/submissions.js');

}

function print_pre($array = array() , $exit = false){

    echo '<pre>';
    print_r($array);
    echo '</pre>';

    if($exit){
        exit;
    }

}

function assets_submission_menu(){

    $items['view/submissions'] = array(
        'page callback' => 'display_user_assets_submission', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
        'file' => 'includes/assets_submission_page.inc',
    );

    return $items;

}


function display_user_assets_submission(){
    return theme('view_user_submissions', array());
}

/**
 * Implements hook_theme().
 */

function assets_submission_theme() {

    $path = drupal_get_path('module', 'assets_submission') . '/templates';

    return array('view_user_submissions' => array(
        'path' => $path,
        'template' => 'view-user-submissions',
        'variables' => array(),
    )
    );
}


function assets_submission_block_view_alter(&$data, $block) {

   //print_pre($block);

}


function template_preprocess_view_user_submissions(&$variables){

    //print_pre($variables,1);

    /*global $user;


    $type = 'submission';
    $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
    drupal_set_title(t('@name', array('@name' => 'Submission')), PASS_THROUGH);
    $form = drupal_get_form($type . '_node_form', $node);

    unset($form['actions']['preview']);
    //unset($form['title']['#title']);
    $form['title']['#title'] = 'Title';
    unset($form['field_submission_image']['und'][0]['#title']);

    $form['body']['und']['#title'] = 'Description:';
    $form['body']['und'][0]['#title'] = 'Description:';
    $form['body']['und'][0]['value']['#title'] = 'Description:';

    //Render new submission form
    $new_submission_form = drupal_render($form);
    $variables['new_submission_form'] = $new_submission_form;

    return $variables;*/

}

function assets_submission_form_submission_node_form_alter(&$form, &$form_state, $extra){

    $form['new_submission'] = array(
        '#prefix' => '<div class="new-submission-form" style="float: left">',
        '#suffix' => '</div>',
        '#markup' => '<input id="new-submission" type="button" value="New Submission">',
        '#weight' => -10,
    );
    $form['ajax-submit']['#value'] = 'Submit';


    $nid = $extra;
    $form['nid'] = array('#type' => 'value', '#value' => $nid);

    $show_taxonomy_terms = module_exists('taxonomy') &&
        variable_get('revisioning_show_taxonomy_terms', TRUE) && (count(taxonomy_get_vocabularies()) > 0);

    module_load_include('inc','revisioning','revisioning_api');

    $revisions = _revisioning_get_all_revisions_for_node($nid, $show_taxonomy_terms);

    $revision_ids = array();
    $published = FALSE;
    foreach ($revisions as $revision) {
        $vid = $revision->vid;
        if ($vid == $revision->current) {
            $title = $revision->title;
            $published = $revision->status;
        }
        // No text next to check boxes (see below).
        $revision_ids[$vid] = '';
        $base_url = "node/$nid/revisions/$vid";

        // First column: saved date + author.
        $first_cell = t('Saved !date by !username',
                array(
                    '!date' => l(format_date($revision->timestamp, 'short'), "$base_url/view"),
                    '!username' => theme('username', array('account' => $revision))))
            . (empty($revision->log) ? '' : '<p class="revision-log">' . filter_xss($revision->log) . '</p>');
        $form['info'][$vid] = array(
            // Was: 'item', see [#1884696].
            '#type' => 'markup',
            '#markup' => $first_cell,
        );

        // Third & fourth columns: term (2nd column is handled below).
        if (!empty($revision->tags)) {
            $form['tags'][$vid] = array(
                '#type' => 'item',
                '#markup' => $revision->tags,
            );
            $has_tags = TRUE;
        }
        if (!empty($revision->term)) {
            $form['term'][$vid] = array(
                '#type' => 'item',
                '#markup' => $revision->term,
            );
            $has_terms = TRUE;
        }
        $form['status'][$vid] = array(
            '#type' => 'value',
            '#value' => $revision->status,
        );
    }
    // Close foreach ($revisions as $revision).
    if (empty($has_tags)) {
        unset($form['tags']);
    }
    if (empty($has_terms)) {
        unset($form['term']);
    }
    revisioning_set_status_message(format_plural(count($revisions),
        '%title is @publication_status. It has only one revision',
        '%title is @publication_status. It has @count revisions.',
        array(
            '%title' => $title,
            '@publication_status' => ($published ? t('published') : t('NOT published')),
        )
    ));
    if (count($revisions) >= 2 && module_exists('diff')) {
        // Second column: check-boxes to select two revisions to compare
        // The default selection is the top two check-boxes
        $id1 = key($revision_ids);
        next($revision_ids);
        $id2 = key($revision_ids);
        $form['tickbox'] = array(
            '#type' => 'checkboxes',
            '#options' => $revision_ids,
            '#default_value' => array($id1, $id2),
            '#required' => TRUE,
        );
        // Submit button.
        $form['submit'] = array('#value' => t('Compare'), '#type' => 'submit');
    }

}


function assets_submission_node_submit($node, $form, &$form_state) {

    //print_pre($node, 1);
   
}

?>