<?php

if(!function_exists('node_add')){
    module_load_include('inc','node','node.pages');
}


function assets_submission_init(){
   // drupal_set_message('Assets Submission');
    drupal_add_js(drupal_get_path('module', 'custom').'/assets_submission/js/submissions.js');
    drupal_add_js(drupal_get_path('module', 'custom').'/assets_submission/js/display_colorbox.js');
    if(!isset($_POST) && empty($_POST)){
        setcookie("submissionNode", "", time()-3600);
        unset($_COOKIE['submissionNode']);
    }
}

function print_pre($array = array() , $exit = false){

    echo '<pre>';
    print_r($array);
    echo '</pre>';

    if($exit){
        exit;
    }

}

function assets_submission_menu(){

    $items['view/submissions'] = array(
        'page callback' => 'display_user_assets_submission', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
        'file' => 'includes/assets_submission_page.inc',
    );

    $items['partner/update/submission/comment'] = array(
        'page callback' => 'update_submission_comment', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
        'file' => 'includes/assets_submission_page.inc',
    );

    $items['partner/update/submission/status'] = array(
        'page callback' => 'update_submission_status_by_admin', // Render HTML
        'type' => MENU_CALLBACK,
        'access callback' => TRUE,
        'file' => 'includes/assets_submission_page.inc',
    );

    return $items;

}


function display_user_assets_submission(){
    return theme('view_user_submissions', array());
}

/**
 * Implements hook_theme().
 */

function assets_submission_theme() {

    $path = drupal_get_path('module', 'assets_submission') . '/templates';

    return array('view_user_submissions' => array(
        'path' => $path,
        'template' => 'view-user-submissions',
        'variables' => array(),
    )
    );
}


function assets_submission_block_view_alter(&$data, $block) {

   //print_pre($block);

}

function get_clean_url($str) {
    # result array
    $arr = array();

    # split on outer delimiter
    $pairs = explode('&', $str);

    # loop through each pair
    foreach ($pairs as $i) {
        # split into name and value
        list($name,$value) = explode('=', $i, 2);

        # if name already exists
        if( isset($arr[$name]) ) {
            # stick multiple values into an array
            if( is_array($arr[$name]) ) {
                $arr[$name][] = $value;
            }
            else {
                $arr[$name] = array($arr[$name], $value);
            }
        }
        # otherwise, simply stick it in a scalar
        else {
            $arr[$name] = $value;
        }
    }

    # return result array
    return $arr;
}

function template_preprocess_view_user_submissions(&$variables){

    if(user_is_logged_in()) {

        global $user;
        $uid = $user->uid;
        $node_type = 'submission';

        $args = array();
        if (isset($_SERVER['QUERY_STRING']) && !empty($_SERVER['QUERY_STRING'])) {
            $query = urldecode($_SERVER['QUERY_STRING']);
            $args = get_clean_url($query);
        }

        //print_pre($args);

        $nodes = array();

        $admin = false;
        if (in_array('administrator', $user->roles)) {
            $admin = true;
        }

        if ($admin) {
            $nids = db_query('SELECT nid FROM {node} WHERE type = :type ORDER BY nid DESC', array(':type' => $node_type))->fetchCol();
        } else {
            $user = user_load($uid);

            $gid = $user->field_company_name['und'][0]['target_id'];

            $members_ids = db_query("SELECT og.etid as uid
            FROM {og_membership} og
            WHERE og.gid=:gid
            AND og.group_type=:group_type
            AND og.entity_type=:entity_type",
                array(
                    ':gid' => $gid,
                    ':entity_type' => 'user',
                    ':group_type' => 'node',
                )
            )->fetchAll();


            $mids = array();
            if ($members_ids) {
                foreach ($members_ids as $mid) {
                    array_push($mids, $mid->uid);
                }
                $uids = implode(',', $mids);
            } else {
                $uids = $uid;
            }

            $nids = db_query('SELECT nid FROM {node} WHERE uid IN(:uid) AND type = :type ORDER BY nid DESC', array(':uid' => $uids, ':type' => $node_type))->fetchCol();

        }

        if (!empty($nids)) {
            $nodes = node_load_multiple($nids);
        }

        $show_taxonomy_terms = module_exists('taxonomy') &&
            variable_get('revisioning_show_taxonomy_terms', TRUE) && (count(taxonomy_get_vocabularies()) > 0);

        module_load_include('inc', 'revisioning', 'revisioning_api');

        $node_revisions = array();

        //$full_submissions = array();
        foreach ($nodes as $nid => $node) {
            $node_revisions[$nid]['submissions'] = _revisioning_get_all_revisions_for_node($node->nid, $show_taxonomy_terms);
        }

        unset($nid);

        $created_submissions = array();
        $updated_submissions = array();
        $reply_from_gigabyte = array();
        $reply_from_partner = array();
        $all = array();
        $approved = array();

        foreach ($node_revisions as $nid => $revisions) {

            $node_revisions[$nid]['root'] = node_load_multiple(array($nid));

            $first_submission = false;

            foreach ($revisions['submissions'] as $rid => $revision) {

                $node_revisions[$nid]['submissions'][$rid]->node = node_load($nid, $rid);
                //$node_revisions[$nid]['submissions'][$rid]->user = user_load_multiple(array($revision->uid));

                //Get Last comment of submission iteration
                $comment = db_query('SELECT * FROM {submission_comments} WHERE nid = :nid AND sid = :sid ORDER BY comment_id DESC LIMIT 1',
                    array(':nid' => $nid, ':sid' => $rid))->fetchAssoc();

                $node_revisions[$nid]['submissions'][$rid]->comment = $comment;


                if (!$first_submission) {

                    $created = $revisions['submissions'][$rid]->timestamp;
                    $updated = $revisions['submissions'][$rid]->node->changed;
                    $status = $revisions['submissions'][$rid]->node->status;
                    $submission_nodeid = $nid;

                    $created_submissions[$rid] = $created;
                    $updated_submissions[$rid] = $updated;
                    $all[$rid] = $submission_nodeid;


                    if (isset($args) && !empty($args)) {

                        if ($args['filter'] == 'submitted') {

                            if ($comment) {
                                if (!$status) {
                                    $reply_from_partner[$rid] = $created;
                                }
                            } else {
                                if (!$status) {
                                    $reply_from_gigabyte[$rid] = $created;
                                }
                            }

                            if ($status) {
                                $approved[$rid] = $created;
                            }

                        } else if ($args['filter'] == 'updated') {

                            if ($comment) {
                                if (!$status) {
                                    $reply_from_partner[$rid] = $updated;
                                }
                            } else {
                                if (!$status) {
                                    $reply_from_gigabyte[$rid] = $updated;
                                }
                            }

                            if ($status) {
                                $approved[$rid] = $updated;
                            }

                        } else if ($args['filter'] == 'all') {

                            if ($comment) {
                                if (!$status) {
                                    $reply_from_partner[$rid] = $submission_nodeid;
                                }
                            } else {
                                if (!$status) {
                                    $reply_from_gigabyte[$rid] = $submission_nodeid;
                                }
                            }

                            if ($status) {
                                $approved[$rid] = $submission_nodeid;
                            }
                        }

                    }

                    $first_submission = true;
                }

                //ksort($node_revisions[$nid]['submissions']);
            }

            $node_revisions[$nid]['root']['comment'] = comment_load($node_revisions[$nid]['root'][$nid]->cid);
        }

        if (isset($args) && !empty($args)) {

            if ($args['filter'] == 'submitted') {
                $node_revisions = arrange_submissions($args, $created_submissions, $node_revisions);
            } elseif ($args['filter'] == 'updated') {
                $node_revisions = arrange_submissions($args, $updated_submissions, $node_revisions);
            }elseif ($args['filter'] == 'all'){
                $node_revisions = arrange_submissions($args, $all, $node_revisions);
            }

            if ($args['status']) {

                if ($args['status'] == 'gigabyte') {
                    $node_revisions = arrange_submissions($args, $reply_from_gigabyte, $node_revisions);
                } elseif ($args['status'] == 'partner') {
                    $node_revisions = arrange_submissions($args, $reply_from_partner, $node_revisions);
                } elseif ($args['status'] == 'approved') {
                    $node_revisions = arrange_submissions($args, $approved, $node_revisions);
                }
            }

        }

        $variables['submissions_lists'] = $node_revisions;


    }else{

        global $base_url;
        $loginPage = '<a href="'.$base_url.'/login'.'">Login</a>';
        drupal_set_message('Please login to access the view submission page, Click here to '.$loginPage);

    }

    return $variables;
}

function arrange_submissions($args, $filter_data, $submissions){

    $filtered = filter_sort($args, $filter_data);

    $filtered_submissions = array();

    foreach ($filtered as $rid => $value){

        foreach ($submissions as $nid => $lists){

            foreach ($lists['submissions'] as $srid => $revision) {

                 if($srid == $rid){
                     $filtered_submissions[$nid] = $lists;
                     break;
                 }

            }

        }

    }

    return $filtered_submissions;
}


function filter_sort($args , $array)
{

    if(isset($args) && !empty($args)){

        if($args['sort'] == 'ASC'){
            asort($array);
        }else if($args['sort'] == 'DESC'){
            arsort($array,0);
        }
    }

    return $array;

}

function assets_submission_form_submission_node_form_alter(&$form, &$form_state, $extra){

    $form['new_submission'] = array(
        '#prefix' => '<div class="new-submission-form" style="float: left">',
        '#suffix' => '</div>',
        '#markup' => '<input id="new-submission" type="button" value="New Submission">',
        '#weight' => -10,
    );
    $form['ajax-submit']['#value'] = 'Submit';

   // $form['#attributes']['class'][] = 'group4';
    $form['#prefix'] = '<div class="submission-form">';
    $form['#suffix'] = '</div>';

    //print_pre($form['displayonly'],1);

}


function assets_submission_node_submit($node,&$form, &$form_state) {

   // print_pre($node);

    $nid = null;
    if(isset($_COOKIE['submissionNode']) && !empty($_COOKIE['submissionNode'])){
        $nid = $_COOKIE['submissionNode'];
    }

    if($nid) {
        // Programatically load the existing revision and save it
        // Taken from http://api.drupal.org/api/drupal/modules!node!node.module/function/node_save/7
        $new_revision = node_load($nid);

        //print_pre($new_revision,1);

        // Make any changes to the new revision here...
        $new_revision->title = $node->title;
        $new_revision->changed = time();
        $new_revision->revision = 1;
        $new_revision->body = $node->body;
        $new_revision->field_submission_image = $node->field_submission_image;
        $new_revision->log = t($node->title. 'is new submission of' .$new_revision->type);

        // Save the new revision first
        node_save($new_revision);

        watchdog('content', '@type: reverted %title submission %revision.', array('@type' => $new_revision->type, '%title' => $new_revision->title, '%revision' => $new_revision->vid));
        drupal_set_message(t('@type %title was saved with a new submission', array('@type' => node_type_get_name($new_revision), '%title' => $new_revision->title)));

        setcookie("submissionNode", "", time()-3600);
        unset($_COOKIE['submissionNode']);
        drupal_goto('view/submissions');

    }
   
}

?>